@page "/usuarios/edit"
@using Microsoft.EntityFrameworkCore
@using FinanceControl.UI.Domain.Entities
@inject IDbContextFactory<FinanceControl.UI.Infrastructure.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/usuarios">Usuários</a></li>
                    <li class="breadcrumb-item active">Editar</li>
                </ol>
            </nav>

            <div class="card">
                <div class="card-header">
                    <h3 class="card-title mb-0">Editar Usuário</h3>
                </div>
                <div class="card-body">
                    @if (Usuarios is null)
                    {
                        <div class="d-flex justify-content-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Carregando...</span>
                            </div>
                        </div>
                    }
                    else
                    {
                        <EditForm method="post" Model="Usuarios" OnValidSubmit="UpdateUsuarios" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary role="alert" class="alert alert-danger" />
                            <input type="hidden" name="Usuarios.Id" value="@Usuarios.Id" />

                            <div class="row g-3">
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <InputText id="nome" @bind-Value="Usuarios.Nome" class="form-control" placeholder="Nome" />
                                        <label for="nome">Nome</label>
                                        <ValidationMessage For="() => Usuarios.Nome" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-floating mb-3">
                                        <InputText id="email" @bind-Value="Usuarios.Email" class="form-control" placeholder="Email" />
                                        <label for="email">Email</label>
                                        <ValidationMessage For="() => Usuarios.Email" class="text-danger" />
                                    </div>
                                </div>
                            </div>

                            <div class="d-flex gap-2 mt-4">
                                <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-save"></i> Salvar
                                </button>
                                <a href="/usuarios" class="btn btn-secondary">
                                    <i class="bi bi-arrow-left"></i> Voltar
                                </a>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Usuarios? Usuarios { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Usuarios ??= await context.Usuarios.FirstOrDefaultAsync(m => m.Id == Id);

        if (Usuarios is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateUsuarios()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Usuarios!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/usuarios");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UsuariosExists(Usuarios!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            throw;
        }
    }

    private bool UsuariosExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Usuarios.Any(e => e.Id == id);
    }
}
